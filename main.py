import logging
import asyncio
import random
import redis.asyncio as redis
from aiogram import Bot, Dispatcher, types , executor
from aiogram import types
from aiogram.dispatcher.filters import Command
from keyboard_panel import keyboardpanel
from dotenv import load_dotenv
import os


load_dotenv("secret.env")


API_TOKEN = os.getenv("API_TOKEN") #—Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
CHANNEL_ID = os.getenv("CHANNEL_ID") #–≤–∞—à –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞
ADMIN_ID = int(os.getenv("ADMIN_ID")) #–∞–π–¥–∏ –∞–¥–º–∏–Ω–∞(–≤–æ–æ–±—â–µ –µ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è , –Ω—É –¥–∞ –ª–∞–¥–Ω–æ)


r = redis.from_url("redis://localhost:6379/0" , decode_responses=True)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


PHRASES_KEY="sen:description" #—Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑
TIMER_KEY = "sen:interval" #—Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–∏



async def is_admin(user_id: int , chat_id: str):
    admins = await bot.get_chat_administrators(chat_id) #–ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã
    return any(admin.user.id == user_id for admin in admins) #–Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤




@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É.\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n–ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π‚ùóÔ∏è" , reply_markup=keyboardpanel())



@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer("/setime ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π\n/addesc ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n/deldesc ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É")




@dp.message_handler(commands=['addesc'])
async def add_desc(message: types.Message):
    if not await is_admin(message.from_user.id , CHANNEL_ID):
        return await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    text = message.get_args().strip() #—É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç(–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)

    if not text:
        return message.reply("‚ùå–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ.–ù–∞–ø—Ä–∏–º–µ—Ä: /addesc <–æ–ø–∏—Å–∞–Ω–∏–µ>")

    await r.rpush(PHRASES_KEY , text) #–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –ø–∞–º—è—Ç–∏ —Ä–ï–¥–∏—Å
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ‚úÖ")




@dp.message_handler(lambda message: message.text == "üóí–í—ã–≤–æ–¥ –≤—Å–µ—Ö –æ–ø–∏—Å–∞–Ω–∏–π")
async def list_desc(message: types.Message):
    if not await is_admin(message.from_user.id , CHANNEL_ID):
       return await message.reply("‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    descs = await r.lrange(PHRASES_KEY , 0 , -1) #–≤—ã–≤–æ–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
    if not descs:
        return await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    text = "\n".join(f"{i+1}. {d}" for i , d in enumerate(descs))
    await message.answer(text)





@dp.message_handler(lambda message: message.text == "‚ùå–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
async def del_decsriprion(message: types.Message):
    if not await is_admin(message.from_user.id , CHANNEL_ID):
       return await message.reply("‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    descs = await r.rpop(PHRASES_KEY)
    if not descs:
        return await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—É—Å—Ç")
    await message.answer("‚ö†Ô∏è–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")




@dp.message_handler(lambda message: message.text == "üóë–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è")
async def del_all_decsriprion(message: types.Message):
    if not await is_admin(message.from_user.id , CHANNEL_ID):
       return await message.reply("‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    descs = await r.delete(PHRASES_KEY)
    if not descs:
        return await message.reply("–í–∞—à —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏—Ç–∞–∫ –ø—É—Å—Ç") 
    await message.answer("‚ö†Ô∏è–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")




@dp.message_handler(commands=['deldesc'])
async def enumerate_del_cmd(message: types.Message):
    if not await is_admin(message.from_user.id , CHANNEL_ID):
        return await message.reply("‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    arg = message.get_args().strip()

    if not arg.isdigit():
        return await message.reply("‚ùå–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–µ–≤–µ—Ä–Ω–æ.\n –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–º–∞–Ω–¥—É , –Ω–∞–ø—Ä–∏–º–µ—Ä: /deldesc <–Ω–æ–º–µ—Ä>")

    index = int(arg) - 1 #—á—Ç–æ –±—ã –Ω–µ —à–ª–æ —Å 0, –∞ –µ–¥–µ–Ω–∏—Ü—ã 

    descs = await r.lrange(PHRASES_KEY , 0 , -1) #–≤—ã–≤–æ–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
    if not descs:
        return await message.reply("‚ùå–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    if index < 0 or index > len(descs):
        return await message.reply("‚ùå–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º")

    removed = descs[index] #–∑–∞–ø–æ–º–µ–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä

    await r.lset(PHRASES_KEY , index , "__TO_DELETE__") #–∑–∞–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Ç–∫—É
    await r.lrem(PHRASES_KEY , 0 , "__TO_DELETE__") #—É–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–æ–π –º–µ—Ç–∫–æ–π

    await message.reply(f"‚ö†Ô∏è–£–¥–∞–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {index+1}:\n{removed}")




@dp.message_handler(commands=['setime'])
async def set_time(message: types.Message):
    if not await is_admin(message.from_user.id , CHANNEL_ID):
       return await message.reply("‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

    descs = await r.lrange(PHRASES_KEY , 0 , -1) #–ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
    if not descs:
        return await message.reply("‚ùå–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

    arg = message.get_args().strip().lower() #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã 

    if not arg:
        return await message.answer("‚ùå–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /setime 6h(–∏–ª–∏ 30m, 1h, 10s)")

    multipliers = {"s" : 1, "m" : 60 , "h": 3600} #—Ç–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é

    try:
        value = int(float(arg[:-1] or arg) * {"s" : 1, "m" : 60 , "h": 3600}.get(arg[-1], 1))
    except (ValueError, KeyError):
        return await message.reply("‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /setime 6h(–∏–ª–∏ 30m, 1h, 10s)")

    await r.set(TIMER_KEY, value)
    await message.reply(f"‚ö†Ô∏è–í—Ä–µ–º—è —Å–º–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π: {arg}")



async def route_descriptions():
    while True:

        interval = int(await r.get(TIMER_KEY) or 6 * 60 * 60) #–≤—Ä–µ–º—è –ø–æ –¥–µ–≤–æ—Ñ–ª—Ç—É —Å—Ç–æ–∏—Ç 6 —á–∞—Å–æ–≤!
        descs = await r.rpop(PHRASES_KEY) #–£–¥–∞–ª—è–µ—Ç—Å—è —Å –∫–æ–Ω—Ü–∞
        if not descs:
            await asyncio.sleep(3600) #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ —á–∞—Å
            continue
        try:
            await bot.set_chat_description(chat_id=CHANNEL_ID, description=descs) #–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await r.lpush(PHRASES_KEY , descs) #–î–æ–±–∞–≤–æ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞

        except Exception as e:

            print(f"Error updating channel description: {e}")

   
        await asyncio.sleep(interval) #–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª



async def on_startup(_):
    asyncio.create_task(route_descriptions())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True , on_startup=on_startup)